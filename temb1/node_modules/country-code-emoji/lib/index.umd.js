!function(t,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):(t=t||self).flag=r()}(this,function(){"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var r=0,o=new Array(t.length);r<t.length;r++)o[r]=t[r];return o}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var t=/^[a-z]{2}$/i,r=127397;return function countryCodeEmoji(o){if(!t.test(o)){var e=_typeof(o);throw new TypeError("cc argument must be an ISO 3166-1 alpha-2 string, but got '".concat("string"===e?o:e,"' instead."))}var n=_toConsumableArray(o.toUpperCase()).map(function(t){return t.charCodeAt()+r});return String.fromCodePoint.apply(String,_toConsumableArray(n))}});
//# sourceMappingURL=index.umd.js.map
