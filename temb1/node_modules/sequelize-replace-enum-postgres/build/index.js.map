{"version":3,"sources":["../src/index.js"],"names":["args","tableName","columnName","defaultValue","newValues","queryInterface","enumName","newEnumName","sequelize","transaction","t","sequelizeOptions","createEnum","name","values","then","unsetDefaultValueFromEnum","setColumnTypeToEnum","dropEnum","renameEnum","oldEnumName","setColumnDefault","defaultValueType","query","getQueryToCreateEnum","join","getQueryToRemoveDefaultFromColumn","getQueryToSetEnumType","getQueryToDropEnum","getQueryToRenameEnum","getQueryToSetColumnDefault"],"mappings":"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","sourcesContent":["/**\n * Since PostgreSQL still does not support remove values from an ENUM,\n * the workaround is to create a new ENUM with the new values and use it\n * to replace the other.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.defaultValue\n * @param {Array}  args.newValues\n * @param {Object} args.queryInterface\n * @param {String} args.enumName - Optional.\n *\n * @return {Promise}\n */\nexport default (args) => {\n  const {\n    tableName,\n    columnName,\n    defaultValue,\n    newValues,\n    queryInterface,\n    enumName = `enum_${tableName}_${columnName}`\n  } = args;\n\n  const newEnumName = `${enumName}_new`;\n\n  return queryInterface.sequelize.transaction((t) => {\n    const sequelizeOptions = { transaction: t };\n\n    // Create a copy of the type\n    return createEnum(\n      { queryInterface, name: newEnumName, values: newValues, sequelizeOptions }\n    )\n      // Drop default value (ALTER COLUMN cannot cast default values)\n      .then(() => defaultValue && unsetDefaultValueFromEnum(\n        { queryInterface, tableName, columnName, sequelizeOptions }\n      ))\n      // Change column type to the new ENUM TYPE\n      .then(() => setColumnTypeToEnum({\n        tableName,\n        columnName,\n        enumName: newEnumName,\n        queryInterface,\n        sequelizeOptions\n      }))\n      // Drop old ENUM\n      .then(() => dropEnum({ enumName, sequelizeOptions, queryInterface }))\n      // Rename new ENUM name\n      .then(() => renameEnum({\n        oldEnumName: newEnumName,\n        newEnumName: enumName,\n        queryInterface,\n        sequelizeOptions\n      }))\n      .then(() => defaultValue && setColumnDefault({\n        tableName,\n        columnName,\n        defaultValue,\n        defaultValueType: enumName,\n        queryInterface,\n        sequelizeOptions\n      }));\n  });\n};\n\n/**\n * Create a new ENUM.\n *\n * @param {Object}   args\n * @param {String}   args.name\n * @param {String[]} args.values\n * @param {Object}   args.sequelizeOptions\n * @param {Object}   args.queryInterface\n *\n * @return {Promise}\n */\nexport function createEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToCreateEnum(args.name, args.values),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Returns the query to create an Enum.\n *\n * @param {String}   name\n * @param {String[]} values\n *\n * @return {String}\n */\nexport function getQueryToCreateEnum(name, values) {\n  return `CREATE TYPE \"${name}\" AS ENUM ('${values.join('\\', \\'')}')`;\n}\n\n/**\n * Unset default value from ENUM.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {Object} args.sequelizeOptions\n * @param {Object} args.queryInterface\n *\n * @return {Promise}\n */\nexport function unsetDefaultValueFromEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToRemoveDefaultFromColumn(args.tableName, args.columnName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to drop default value for a column.\n *\n * @param {String} tableName\n * @param {String} columnName\n *\n * @return {String}\n */\nexport function getQueryToRemoveDefaultFromColumn(tableName, columnName) {\n  return `ALTER TABLE \"${tableName}\" ALTER COLUMN \"${columnName}\" DROP DEFAULT`;\n}\n\n/**\n * Set the column type to an Enum.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.enumName\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function setColumnTypeToEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToSetEnumType(args.tableName, args.columnName, args.enumName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to set a column type to an Enum.\n *\n * @param {String} tableName\n * @param {String} columnName\n * @param {String} enumName\n *\n * @return {String}\n */\nexport function getQueryToSetEnumType(tableName, columnName, enumName) {\n  return `\n    ALTER TABLE \"${tableName}\"\n      ALTER COLUMN \"${columnName}\"\n        TYPE \"${enumName}\"\n        USING (\"${columnName}\"::text::\"${enumName}\")\n  `;\n}\n\n/**\n * Drop an Enum.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.enumName\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function dropEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToDropEnum(args.enumName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to drop an Enum.\n *\n * @param {String} enumName\n *\n * @return {String}\n */\nexport function getQueryToDropEnum(enumName) {\n  return `DROP TYPE \"${enumName}\"`;\n}\n\n/**\n * Rename an Enum.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.oldEnumName\n * @param {String} args.newEnumName\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function renameEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToRenameEnum(args.oldEnumName, args.newEnumName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to rename an enum.\n *\n * @param {String} oldEnumName\n * @param {String} newEnumName\n *\n * @return {String}\n */\nexport function getQueryToRenameEnum(oldEnumName, newEnumName) {\n  return `ALTER TYPE \"${oldEnumName}\" RENAME TO \"${newEnumName}\"`;\n}\n\n/**\n * Set the default value for a column.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.defaultValue\n * @param {String} args.defaultValueType\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function setColumnDefault(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToSetColumnDefault(\n      args.tableName,\n      args.columnName,\n      args.defaultValue,\n      args.defaultValueType\n    ),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to set the default value for a column.\n *\n * @param {String} tableName\n * @param {String} columnName\n * @param {String} defaultValue\n * @param {String} defaultValueType\n *\n * @return {String}\n */\nexport function getQueryToSetColumnDefault(\n  tableName,\n  columnName,\n  defaultValue,\n  defaultValueType\n) {\n  return `\n    ALTER TABLE \"${tableName}\"\n      ALTER COLUMN \"${columnName}\"\n        SET DEFAULT '${defaultValue}'::\"${defaultValueType}\"\n  `;\n}\n"],"file":"index.js"}