"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const interactive_messages_1 = require("@slack/interactive-messages");
const index_1 = __importDefault(require("./index"));
const ManagerController_1 = __importDefault(require("../RouteManagement/ManagerController"));
const OperationsController_1 = require("../RouteManagement/OperationsController");
const JoinRouteInteractions_1 = __importDefault(require("../RouteManagement/JoinRoute/JoinRouteInteractions"));
const RateTripController_1 = __importDefault(require("../TripManagement/RateTripController"));
const TripInteractions_1 = __importDefault(require("../SlackPrompts/notifications/TripNotifications/TripInteractions"));
const TripCabController_1 = __importDefault(require("../TripManagement/TripCabController"));
const SlackInteractionsHelpers_1 = __importDefault(require("../helpers/slackHelpers/SlackInteractionsHelpers"));
const ProvidersController_1 = __importDefault(require("../RouteManagement/ProvidersController"));
const trip_router_1 = __importDefault(require("../../new-slack/trips/trip-router"));
const actions_1 = __importDefault(require("../../new-slack/trips/user/actions"));
const actions_2 = __importDefault(require("../../new-slack/routes/actions"));
const user_trip_booking_controller_1 = __importDefault(require("../../new-slack/trips/user/user-trip-booking-controller"));
const user_trip_edit_controller_1 = __importDefault(require("../../new-slack/trips/user/user-trip-edit-controller"));
const RouteNotifications_1 = require("../SlackPrompts/notifications/RouteNotifications");
const modal_router_1 = __importDefault(require("../../new-slack/helpers/modal.router"));
const itinerary_controller_1 = __importDefault(require("../../new-slack/trips/user/itinerary.controller"));
const trip_controller_1 = __importDefault(require("../../new-slack/trips/manager/trip.controller"));
const constants_1 = __importDefault(require("../../new-slack/trips/manager/constants"));
const JoinRouteInputHandler_1 = __importDefault(require("../RouteManagement/JoinRoute/JoinRouteInputHandler"));
const actions_3 = __importDefault(require("../../new-slack/trips/travel/actions"));
const travel_controller_1 = __importDefault(require("../../new-slack/trips/travel/travel.controller"));
const seeAvailableRoute_controller_1 = __importDefault(require("../../new-slack/routes/user/seeAvailableRoute.controller"));
const joinRoute_controller_1 = __importDefault(require("../../new-slack/routes/user/joinRoute.controller"));
const slackInteractionsRouter = interactive_messages_1.createMessageAdapter(process.env.SLACK_SIGNING_SECRET);
exports.modalRouter = new modal_router_1.default();
slackInteractionsRouter.action({ callbackId: 'change_location' }, index_1.default.handleChangeLocation);
slackInteractionsRouter.action({ callbackId: 'back_to_launch' }, index_1.default.launch);
slackInteractionsRouter.action({ callbackId: 'welcome_message' }, SlackInteractionsHelpers_1.default.welcomeMessage);
slackInteractionsRouter.action({ callbackId: 'travel_trip_start' }, index_1.default.bookTravelTripStart);
slackInteractionsRouter.action({ callbackId: /^travel_trip/ }, index_1.default.handleTravelTripActions);
slackInteractionsRouter.action({ callbackId: 'itinerary_actions' }, SlackInteractionsHelpers_1.default.handleItineraryActions);
slackInteractionsRouter.action({ actionId: 'send_feedback' }, SlackInteractionsHelpers_1.default.handleFeedbackAction);
slackInteractionsRouter.action({ callbackId: 'get_feedback' }, SlackInteractionsHelpers_1.default.handleGetFeedbackAction);
slackInteractionsRouter.action({ callbackId: /^operations_approval/ }, SlackInteractionsHelpers_1.default.sendCommentDialog);
slackInteractionsRouter.action({ callbackId: 'operations_reason_dialog_trips' }, index_1.default.handleTripActions);
slackInteractionsRouter.action({ callbackId: 'trips_cab_selection' }, SlackInteractionsHelpers_1.default.handleOpsAction);
slackInteractionsRouter.action({ callbackId: 'provider_actions' }, index_1.default.handleSelectCabActions);
slackInteractionsRouter.action({ callbackId: 'confirm_ops_approval' }, TripCabController_1.default.handleSelectProviderDialogSubmission);
slackInteractionsRouter.action({ callbackId: 'ops_approval_trip' }, OperationsController_1.OperationsHandler.completeOpsAssignCabDriver);
slackInteractionsRouter.action({ callbackId: 'tembea_route' }, index_1.default.startRouteActions);
slackInteractionsRouter.action({ callbackId: 'providers_route_approval' }, SlackInteractionsHelpers_1.default.startProviderActions);
slackInteractionsRouter.action({ callbackId: /^providers_approval/ }, index_1.default.handleSelectCabAndDriverAction);
slackInteractionsRouter.action({ callbackId: /^new_route/ }, index_1.default.handleRouteActions);
slackInteractionsRouter.action({ callbackId: /^manager_route/ }, ManagerController_1.default.handleManagerActions);
slackInteractionsRouter.action({ callbackId: /^operations_route/ }, OperationsController_1.OperationsHandler.handleOperationsActions);
slackInteractionsRouter.action({ callbackId: 'view_new_trip' }, index_1.default.completeTripResponse);
slackInteractionsRouter.action({ callbackId: /^join_route/ }, JoinRouteInputHandler_1.default.handleJoinRouteActions);
slackInteractionsRouter.action({ callbackId: 'rate_trip' }, RateTripController_1.default.rate);
slackInteractionsRouter.action({ callbackId: 'trip_completion' }, TripInteractions_1.default.tripCompleted);
slackInteractionsRouter.action({ callbackId: 'trip_not_taken' }, TripInteractions_1.default.reasonForNotTakingTrip);
slackInteractionsRouter.action({ callbackId: 'route_skipped' }, JoinRouteInteractions_1.default.handleRouteSkipped);
slackInteractionsRouter.action({ callbackId: 'rate_route' }, RateTripController_1.default.rate);
slackInteractionsRouter.action({ callbackId: 'reassign_driver' }, ProvidersController_1.default.providerReassignDriver);
slackInteractionsRouter.action({ callbackId: 'cab_reassign' }, ProvidersController_1.default.handleCabReAssigmentNotification);
slackInteractionsRouter.action({ callbackId: 'provider_actions_route' }, index_1.default.handleProviderApproval);
slackInteractionsRouter.action({ callbackId: 'provider_accept_route' }, ProvidersController_1.default.handleProviderRouteApproval);
slackInteractionsRouter.action({ callbackId: 'user_trip_skip_page' }, itinerary_controller_1.default.handleSkipPage);
slackInteractionsRouter.action({ callbackId: actions_1.default.reasonDialog }, user_trip_booking_controller_1.default.handleReasonSubmit);
slackInteractionsRouter.action({ callbackId: actions_1.default.pickupModalSubmit }, user_trip_booking_controller_1.default.savePickupDetails);
slackInteractionsRouter.action({ callbackId: actions_1.default.destDialog }, user_trip_booking_controller_1.default.saveDestination);
slackInteractionsRouter.action({ callbackId: actions_1.default.payment }, user_trip_booking_controller_1.default.paymentRequest);
slackInteractionsRouter.action({ blockId: RouteNotifications_1.blocks.tripCompletion }, JoinRouteInteractions_1.default.handleRouteBatchConfirmUse);
slackInteractionsRouter.action({ callbackId: constants_1.default.reasonSubmission }, trip_controller_1.default.completeApproveOrDecline);
trip_router_1.default(slackInteractionsRouter);
exports.modalRouter.submission(actions_1.default.reschedule, itinerary_controller_1.default.handleRescheduleRequest);
exports.modalRouter.submission(actions_1.default.pickupModalSubmit, user_trip_booking_controller_1.default.savePickupDetails);
exports.modalRouter.submission(actions_1.default.reschedule, itinerary_controller_1.default.handleRescheduleRequest);
exports.modalRouter.submission(actions_3.default.submitContactDetails, travel_controller_1.default.submitContactDetails.bind(travel_controller_1.default));
exports.modalRouter.submission(actions_3.default.submitEditedContactDetails, travel_controller_1.default.submitContactDetails.bind(travel_controller_1.default));
exports.modalRouter.submission(actions_3.default.submitTripDetails, travel_controller_1.default.submitTripDetails.bind(travel_controller_1.default));
exports.modalRouter.submission(actions_3.default.submitNotes, travel_controller_1.default.submitNotes.bind(travel_controller_1.default));
exports.modalRouter.submission(actions_3.default.addLocations, travel_controller_1.default.submitLocationInfo.bind(travel_controller_1.default));
exports.modalRouter.submission(actions_3.default.submitFlightDetails, travel_controller_1.default.submitFlightDetails.bind(travel_controller_1.default));
exports.modalRouter.submission(actions_2.default.selectManagerSubmit, joinRoute_controller_1.default.handleSelectManager);
exports.modalRouter.submission(actions_2.default.searchRouteSubmit, seeAvailableRoute_controller_1.default.handleSearchRoute);
exports.modalRouter.submission(actions_2.default.skipPageSubmit, seeAvailableRoute_controller_1.default.handleSkipPage);
exports.modalRouter.submission(actions_1.default.editRequestModalSubmit, user_trip_edit_controller_1.default.saveEditRequestDetails);
exports.modalRouter.submission(actions_1.default.editDestinationModalSubmit, user_trip_edit_controller_1.default.saveEditedDestination);
exports.default = slackInteractionsRouter;
//# sourceMappingURL=SlackInteractionsRouter.js.map