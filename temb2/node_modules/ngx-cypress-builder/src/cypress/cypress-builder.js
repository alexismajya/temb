"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const url = require("url");
var CypressRunningMode;
(function (CypressRunningMode) {
    CypressRunningMode["Console"] = "console";
    CypressRunningMode["Browser"] = "browser";
})(CypressRunningMode = exports.CypressRunningMode || (exports.CypressRunningMode = {}));
class CypressBuilder {
    constructor(context) {
        this.context = context;
    }
    run(builderConfig) {
        const options = Object.assign({}, builderConfig.options, { project: builderConfig.root });
        return rxjs_1.of(null).pipe(operators_1.concatMap(() => options.devServerTarget ? this._startDevServer(options) : rxjs_1.of(null)), operators_1.concatMap(() => this._execute(options)), operators_1.take(1));
    }
    // Note: this method mutates the options argument.
    _startDevServer(options) {
        const architect = this.context.architect;
        const [project, targetName, configuration] = options.devServerTarget.split(":");
        // Override browser build watch setting.
        const overrides = { watch: false, host: options.host, port: options.port };
        const targetSpec = {
            project,
            target: targetName,
            configuration,
            overrides
        };
        const builderConfig = architect.getBuilderConfiguration(targetSpec);
        let devServerDescription;
        let baseUrl;
        return architect.getBuilderDescription(builderConfig).pipe(operators_1.tap(description => (devServerDescription = description)), operators_1.concatMap(description => architect.validateBuilderOptions(builderConfig, description)), operators_1.concatMap(() => {
            // Compute baseUrl from devServerOptions.
            if (options.devServerTarget && builderConfig.options.publicHost) {
                let publicHost = builderConfig.options.publicHost;
                if (!/^\w+:\/\//.test(publicHost)) {
                    publicHost = `${builderConfig.options.ssl ? "https" : "http"}://${publicHost}`;
                }
                const clientUrl = url.parse(publicHost);
                baseUrl = url.format(clientUrl);
            }
            else if (options.devServerTarget) {
                baseUrl = url.format({
                    protocol: builderConfig.options.ssl ? "https" : "http",
                    hostname: options.host,
                    port: builderConfig.options.port.toString()
                });
            }
            // Save the computed baseUrl back so that Protractor can use it.
            options.baseUrl = baseUrl;
            return rxjs_1.of(this.context.architect.getBuilder(devServerDescription, this.context));
        }), operators_1.concatMap(builder => builder.run(builderConfig)));
    }
    _execute(options) {
        const additionalCypressConfig = Object.assign({ config: {
                baseUrl: options.baseUrl
            } }, (options.ciBuildId ? { ciBuildId: options.ciBuildId } : {}), (options.env ? { env: options.env } : {}), (options.group ? { group: options.group } : {}), (options.key ? { key: options.key } : {}), (options.parallel ? { parallel: options.parallel } : {}), (options.project ? { project: options.project } : {}), (options.record ? { record: options.record } : {}), (options.reporter ? { reporter: options.reporter } : {}), (options.reporterPath ? { reporter: options.reporterPath } : {}), (options.spec ? { spec: options.spec } : {}));
        const cypress = require("cypress");
        const runner = options.mode === CypressRunningMode.Console
            ? rxjs_1.from(cypress.run(additionalCypressConfig))
                .pipe(operators_1.map((result) => ({ success: result.totalFailed === 0 })))
            : cypress.open(additionalCypressConfig);
        return rxjs_1.from(runner);
    }
}
exports.CypressBuilder = CypressBuilder;
exports.default = CypressBuilder;
//# sourceMappingURL=data:application/json;base64,